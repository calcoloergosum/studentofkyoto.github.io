---
layout: mathpost
title:  "메타프로그래밍: 카테고리의 정의"
date:   2022-11-05 20:40:05 +0900
tags: category-theory
---
# 카테고리의 정의
## 직관

카테고리는 점들의 모임과 그 점 사이의 관계의 모임으로 구성되어 있다. 관계의 모임은 "동일하다"는 관계를 포함하고, 특정 관계들을 합쳐 다른 관계를 만들 수도 있다.

카테고리는 方向그래프(directed graph)에 합성의 개념을 추가한 것이다. 합성이란, 화살표 여럿을 하나의 화살표로 합치는 것을 의미한다. 또한 각각의 頂点(vertex)은 "항등원" 이라고 부르는, 자기 자신으로의 화살표를 적어도 하나 가진다.

카테고리는 점(object)의 모임과 화살표(arrow; morphism)의 모임으로 이루어져 있다. 각 화살표에는 시작점(source object)와 끝점(target object)이 있다. $$ f $$ 의 시작점이 $$ x $$이고 끝점이 $$ y $$ 이면 " $$ f: x\rightarrow y $$ "라고 쓰고, "$$ x $$ 에서 $$ y $$ 로의 화살표"라고 읽는다.

카테고리에서는 화살표 $$ g:x\rightarrow y $$ 와 $$ f:y\rightarrow z $$를 합성해 $$ f\circ g:x\rightarrow z $$ 라는 화살표를 얻는다. 이를 $$ f $$ after $$ g $$ 라고 읽는다. $$g;f$$ 라고 쓰고 $$ g $$ then $$ f $$ 라고 읽기도 한다.

합성 순서를 바꾸어도 화살표는 같다. 즉, 모든 세 개의 화살표 $$ h:w\rightarrow x$$, $$ g:x\rightarrow y $$ , $$ f:y\rightarrow z $$ 에 대해 $$ (h\circ g) \circ f = h \circ (g \circ f) $$ 이다. 따라서 괄호를 제거하고 $$ h\circ g \circ f $$ 로 간단히 표기한다.

집합의 카테고리 Set에서는, 모든 집합은 하나의 점이고, 모든 화살표는 두 집합 사이의 함수이다. 화살표의 합성은 함수의 합성으로 정의된다.

## 정의

카테고리를 주로 정의하는 방법은 두 가지가 있는데, 둘 다 아는 것이 좋다. 왜냐하면 카테고리 이론의 분야에 따라 표기법이 다르다. 한 정의는 Internal category라는 개념으로 확장하기 쉽고, 다른 정의는 enriched category로 확장하기 쉽다. 둘 다 중요한 개념이다. 같은 대상에 대한 서로 다른 記術에 대해서 동치성을 증명할 때, 특정한 정의를 채용하는 것이 더 적절할 수 있다.

### 정의 1
#### 카테고리의 구성요소
카테고리 $$ C $$ 는 다음의 요소로 구성된다.
1. 점의 모임 $$ C_0 $$
2. 화살표의 모임 $$ C_1 $$
3. 모든 화살표에 정의된 시작점(source, domain) $$ s(f) $$ 과 끝점 (destination, codomain) $$ t(f) $$.
4. $$ f $$ 와 $$ g $$ 의 합성: $$ t(f) = s(g) $$ 를 만족하는 모든 화살표 쌍 $$ f, g$$ 에 정의된 화살표 $$ g \circ f $$
5. 각 점 $$x$$에 정의된 항등 화살표 (identity morphism) $$ 1_x $$
#### 구성 요소가 만족해야 할 조건
1. 합성은 시작점과 끝점을 보존한다. 즉, $$ s(g\circ f) = s(f) $$ 이고 $$t(g\circ f) = t(g) $$ 이다.
2. 점 $$ x $$의 항등 화살표 $$ 1_x $$ 는 시작점과 끝점이 $$ x $$ 이다. 즉, $$ s(1_x) = t(1_x) = x$$
3. 합성은 결합법칙이 성립한다. 세 화살표 $$ f, g, h$$ 가 있고 $$ t(f) = s(g) $$ 이고 $$ t(g) = s(h) $$ 일때 (즉, 합성이 정의될 때), $$ (h\circ g) \circ f = h \circ (g \circ f)$$ 이다.
4. 항등 화살표는 결합의 항등원이다. 즉, $$s(f)=x$$ 이고 $$t(f)=y$$ 일때, $$1_y\circ f=f\circ 1_x = f$$ 이다.

#### Syntactic Sugar
1. 점과 화살표가 맥락상 명확히 구분될 때, $$ x\in C_0 $$ 나 $$ f\in C_1 $$ 대신 $$x\in C$$ 혹은 $$f \in C$$와 같이 첨자를 생략하여 표시한다.
2. 화살표 $$ f\in C_1$$가 $$s(f)=x$$, $$t(f)=y$$라고 할 때, $$f:x\rightarrow y$$로 쓴다.
3. $$s(f)=x, t(f)=y$$를 만족하는 $$f$$의 모임을 $$C(x,y)$$라고 쓴다.

### 정의 2
#### 카테고리의 구성요소
카테고리 $$ C $$ 는 다음의 요소로 구성된다.
1. 점의 모임 $$ C_0 $$
2. 모든 두 점 $$x$$, $$y$$에 대해, $$x$$에서 $$y$$로의 화살표의 모임 $$ C_1(x,y) $$
3. 모든 $$ f\in C_1(x,y) $$와 $$g \in C_1(y,z)$$에 정의된 $$g\circ f \in C_1(x,z)$$
4. 각 점 $$x$$에 정의된 항등 화살표 (identity morphism) $$ 1_x $$
#### 구성 요소가 만족해야 할 조건
1. 합성은 결합법칙이 성립한다. 즉 네 점 $$w,x,y,z$$과 세 화살표 $$f\in C_1(w,x), g\in C_1(x,y), h\in C_1(y, z)$$가 주어졌을 때 (즉, 합성이 정의될 때), $$ (h\circ g) \circ f = h \circ (g \circ f)$$ 이다.
2. 항등 화살표는 결합의 항등원이다. 즉, 두 $$x,y$$과 화살표 $$f\in C_1(x,y)$$가 주어졌을 때, $$1_y\circ f=f\circ 1_x = f$$ 이다.

#### Syntactic Sugar
1. 점과 화살표가 맥락상 명확히 구분될 때, $$ x\in C_0 $$ 나 $$ f\in C_1(x,y) $$ 대신 $$x\in C$$ 혹은 $$f \in C(x,y)$$와 같이 첨자를 생략하여 표시한다.
2. $$ f \in C_1(x, y)$$이면, $$s(f)=x$$, $$t(f)=y$$라고 쓴다. 또한, $$f:x\rightarrow y$$로 쓴다.

### Remark
위의 두 정의는 동치이다.

#### "모임" 이라는 단어의 쓰임새에 대해
- 카테고리의 정의에서는, "모임"이라는 단어에 대해 일부러 애매하게 쓴다.
- 집합의 카테고리 Set의 점의 모임은 집합이 아니라는 것을 쉽게 증명할 수 있다. 즉, 모든 집합의 집합은 집합이 아니다 (그보다 크다; Russell의 역설)
- 카테고리의 점의 모임이 집합인 경우, 카테고리가 작다(small)고 한다.
- 카테고리의 모든 점 $$x,y\in C_0$$에 대해, 각 $$C(x,y)$$가 집합인 경우, 카테고리가 국소적으로 작다(locally small)라고 한다. 이 때, $$C(x,y)$$를 "hom-set"이라고 부른다.
- 카테고리가 국소적으로 작지 않은 경우, 카테고리가 크다(large)고 한다. 이 때, $$C(x,y)$$를 "hom-object"이라고 부른다.
- "모임"이라는 단어의 쓰임새는 수학적 기초론을 깊게 얘기하기 않고는 제대로 다룰 수 없다. 하지만 카테고리 이론을 도구로써 사용하는 데에는 문제가 되지 않는다. 왜냐하면 우리가 생각하고자 하는 대상은 카테고리 그 자체가 아니고, 카테고리의 구조에 더해 어떤 추가적인 성질을 가지고 있는 대상이기 때문이다.
- 국소적으로 작은 카테고리에 대해서 할 얘기가 많다. 지금 당장 너무 깊게 생각하지 말고, 때를 기다리자.

## 예시

많은 수학적 구조들을 카테고리로 볼 수 있다. 아래의 각 예시들에서, 화살표의 합성이 무엇인지 생각해보자.

카테고리의 고전적인 예시는 "구체적인 카테고리(concrete category)"라는 것인데, 각 점이 집합이고, 그에 더해 추가적인 구조를 가진다. 이 카테고리에서 화살표는 그 추가적인 구조들을 보존한다. 카테고리라는 용어가 여기서 파생되었다. 말 그대로 동일한 종류(동일한 카테고리)의 구조들과 구조를 보존하는 사상들을, 카테고리라는 하나의 구조로 압축해 다루고자 한 것이다.

- 선형 공간의 카테고리를 Vect라고 한다.
  - Vect의 점은 선형 공간이다.
  - Vect의 화살표는 선형 공간 사이의 선형 변환이다.
- 군의 카테고리를 Grp라고 한다.
  - Grp의 점은 군이다.
  - Grp의 화살표는 군 준동형사상이다.
- 위상 공간의 카테고리를 Top이라고 한다.
  - Top의 점은 위상 공간이다.
  - Top의 화살표는 연속 함수이다.
- 미분 다양체의 카테고리를 Diff라고 한다.
  - Diff의 점은 Smooth 다양체이다.
  - Diff의 화살표는 smooth map이다.
- 환의 카테고리를 Ring이라고 한다.
  - Ring의 점은 환이다.
  - Ring의 화살표는 환 준동형사상이다.

특정 집합을 카테고리로 볼 수 있다.

- 모든 부분순서집합 Poset은 카테고리이다
  - Poset의 점은 원소이다
  - Poset의 화살표는 대소관계이다
- 모든 모노이드 Monoid 는 카테고리이다.
  - 점은 하나 뿐이다.
  - 화살표는 각 원소이다.

## 앞으로의 전개

어떤 수학적 구조를 추상화하여 정의한 뒤에 가장 먼저 생각하고 싶은 것은 다음과 같다.
 
- 이 구조를 보존하는 변환에는 어떤 것이 있는가?
- 구체적인 예에서 중요한 정의들이 추상화 한 뒤에도 잘 정의되는가?
- 구체적인 예에서 중요한 정리들이 추상화 한 뒤에도 성립하는가?

하나씩 살펴보자.

- 이 구조를 보존하는 변환에는 어떤 것이 있는가?
  - 구조를 보존하는 변환을 생각하는 것은 유용하다. "쉬운" 카테고리에서 여러 성질을 발견한 뒤, "어려운" 카테고리로 관심을 옮겨, 그 성질들이 여전히 성립한다는 것을 보장할 수 있기 때문이다.
  - 간단한 예로, 반대 카테고리(Opposite Category)를 생각해보자.
    - 카테고리 $$ C $$가 주어졌을 때, $$ C_1$$의 모든 화살표의 방향을 반대로 돌려버린 모임 $$ C_1^{op}$$로 $$ C_1 $$을 대체해보자. 화살표의 합성의 정의를 조금만 바꾸어주면, 여전히 카테고리가 되도록 할 수 있다. $$f:x\rightarrow y$$, $$g:y\rightarrow z$$가 주어져서, 화살표의 방향을 뒤집은 새로운 화살표를 $$f^{op}:y\rightarrow x, g^{op}:z\rightarrow y$$라고 하자. $$ C$$ 에서의 합성 $$\circ^{op}$$를 $$f^{op} \circ^{op} g^{op} = (g \circ f)^op$$로 정의하면 뒤집은 화살표들이 카테고리임을 알 수 있다. 이 카테고리를 $$C$$ 의 반대 카테고리(Opposite category) $$ C^{op}$$라고 한다.
    - 이 카테고리는 두 가지 이유에서 유용하다.
      - 합성의 순서를 바꿀 수 있다.
      - 카테고리 $$ C $$에서 어떤 정리가 참이면, $$ C^{op}$$ 에서도 참이다.
  - 또 다른 예로, 곱 카테고리(Product Category)를 소개한다.
    - 카테고리 여러 개를 하나의 카테고리로 합칠 수 있다. 두 카테고리 $$C, D$$가 주어졌을 때, 곱 카테고리 $$ C\times D$$ 를 다음과 같이 정의한다.
    - 점은 $$C, D$$의 점$$c, d$$의 순서쌍 $$(c, d)$$ 이다.
    - 화살표는 $$C, D$$ 의 화살표 $$f, g$$의 순서쌍 $$(f, g)$$이다.
    - 합성은 각 카테고리의 성분별 합성으로 정의한다.
    - 항등원은 $$1_{(c, d)}=(1_c, 1_d)$$ 이다.
  - 그 외에도 일반적으로 여러 카테고리 사이의 구조 보존을 생각할 수 있는데, 이를 일반적으로 함자라고 부른다.

- 구체적인 예에서 중요한 정의들이 추상화 한 뒤에도 잘 정의되는가?
  - 첫 번째 과제는, 집합의 구조인 원소(membership)를 사용하지 않고도 집합의 주요한 정의들을 사용할 수 있는지 확인하는 것이다.
    - 공집합, 전체집합, (분리)합집합, 교집합, 여집합, 차집합, 전사, 단사, 전단사, 부분집합, ...
  - 이를 확인하고 나면, 집합 위에 정의된 다양한 개념들이 잘 정의되는지 확인할 수 있을 것이다.
    - 극한, 연속성, 적분, ...
- 구체적인 예에서 중요한 정리들이 추상화 한 뒤에도 성립하는가?
  - 이를 확인하는 작업까지 도달했다면, 호기심의 흐름에 몸을 맡겨 자신의 전문성에 맞는 구체적인 응용 분야를 탐구할 수 있지 않을까 조심스럽게 생각해 본다.

### Note
- 집합론에서 순서쌍의 수학적 구현을 알고 있다면, 위에서 소개한 곱 카테고리의 정의가 이상해 보일 수 있다. 곱 카테고리의 존재를 공리로써 받아들여 순서쌍의 구현에 대한 고민을 회피할 수 있다.
